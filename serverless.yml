service: laravel-weatherlink-apps

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: ap-southeast-1
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: dev
    runtime: provided.al2
    lambdaHashingVersion: 20201221

    environment:
        # environment variable for Laravel
        AWS_BUCKET: !Ref Storage
    iam:
        role:
            statements:
                # Allow Lambda to read and write files in the S3 buckets
                -   Effect: Allow
                    Action: s3:*
                    Resource:
                        - !Sub '${Storage.Arn}' # the storage bucket
                        - !Sub '${Storage.Arn}/*' # and everything inside

resources:
    Resources:
        Storage:
            Type: AWS::S3::Bucket

package:
    # Directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'

functions:
    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-81-fpm}
        events:
            - httpApi: '*'
    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-81} # PHP
            - ${bref:layer.console} # The "console" layer
        events:
          - schedule:
              #rate: rate(5 minutes)
              rate: cron(3,8,13,18,23,28,33,38,43,48,53,58 * * * ? *)
              input: '"weatherlink-api:current-weather"'
          - schedule:
              #rate: cron(6 0 * * ? *)
              #rate: cron(*/5 * * * ? *)
              rate: cron(3,8,13,18,23,28,33,38,43,48,53,58 * * * ? *)
              input: '"weatherlink-api:daily-export-weather-history"'
          - schedule:
              #rate: cron(6 0 * * ? *)
              rate: cron(4,9,14,19,24,29,34,39,44,49,54,59 * * * ? *)
              input: '"ms-graph:rain-notification"'
          - schedule:
              #rate: cron(6 0 * * ? *)
              rate: cron(15 0 * * ? *)
              input: '"weatherlink-api:check-export-weather-history"'

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref
    - serverless-lift

constructs:
  website:
    type: server-side-website
    assets:
      '/js/*': public/js
      '/css/*': public/css
      '/favicon.ico': public/favicon.ico
      '/robots.txt': public/robots.txt
      # add here any file or directory that needs to be served from S3
    # Laravel uses some headers that are not in CloudFront's default whitelist.
    # To add any, we need to list all accepted headers to pass through.
    # https://github.com/getlift/lift/blob/master/docs/server-side-website.md#forwarded-headers
    forwardedHeaders:
      - Accept
      - Accept-Language
      - Content-Type
      - Origin
      - Referer
      - User-Agent
      - X-Forwarded-Host
      - X-Requested-With
      # Laravel Framework Headers
      - X-Csrf-Token
      # Other Headers (e.g. Livewire, Laravel Nova), uncomment based on your needs
      # - X-Livewire
      # - X-Inertia
    domain: weather.suryacipta.com
    certificate: arn:aws:acm:us-east-1:910217798216:certificate/cbe13c53-2cee-4d43-bf5b-1559f26223d6
